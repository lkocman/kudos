#!/usr/bin/env bash
# SPDX-License-Identifier: Apache-2.0
# Copyright © 2025–present Lubos Kocman
# and openSUSE contributors
#
# 🤖 Kudos Badger Bot
# Scans all users, counts kudos given/received, and grants badges.
#
# Usage:
#   ./badger-bot-check-kudos.sh [-i] [-a API_URL]
#
# Examples:
#   ./badger-bot-check-kudos.sh
#   ./badger-bot-check-kudos.sh -i
#   ./badger-bot-check-kudos.sh -a https://kudos.opensuse.org/api
#
# Environment variables:
#   BADGER_BOT_SECRET   Bot authentication token
#   API_BASE            Default API base (default: https://localhost:3000/api)

set -euo pipefail

# --- Check required tools ---
for cmd in curl jq; do
  if ! command -v "$cmd" &>/dev/null; then
    echo "💥 Missing dependency: $cmd"
    echo "👉 Please install it before running this script."
    echo "   For example: sudo zypper install $cmd"
    exit 1
  fi
done

# --- Defaults ---
API_BASE="${API_BASE:-https://localhost:3000/api}"
INSECURE_SSL=0
BADGER_BOT_SECRET="${BADGER_BOT_SECRET:-DEV_STATIC_BOT_TOKEN_123}"

usage() {
  cat <<EOF
🦡 Kudos Badger Bot – grants milestone badges for kudos given/received

Usage:
  $0 [options]

Options:
  -i              Allow insecure SSL (skip certificate verification)
  -a <api_url>    Set API base URL (default: $API_BASE)
  -h              Show this help message

Examples:
  $0 -i
  $0 -a https://kudos.opensuse.org/api
EOF
}

# --- Parse options ---
while getopts "a:ih" opt; do
  case "$opt" in
    a) API_BASE="$OPTARG" ;;
    i) INSECURE_SSL=1 ;;
    h) usage; exit 0 ;;
    *) usage; exit 1 ;;
  esac
done

# --- Curl options ---
CURL_OPTS=(-s)
if [[ "$INSECURE_SSL" == "1" ]]; then
  CURL_OPTS=(-sk)
fi

API_USERS="$API_BASE/users"
API_GRANT="$API_BASE/badges/grant"

# --- Milestones ---
declare -A GAVE_MILESTONES=(
  [1]="gave-1-kudos"
  [10]="gave-10-kudos"
  [100]="gave-100-kudos"
  [1000]="gave-1000-kudos"
)
declare -A RECEIVED_MILESTONES=(
  [1]="got-1-kudos"
  [10]="got-10-kudos"
  [100]="got-100-kudos"
  [1000]="got-1000-kudos"
)

# --- Banner ---
cat <<'EOF'
              _.-=-._                     
           o~`  '  > )--.               
           `.  ,       ) ) )-.         
             `'-._   ,;_,'  ) \        
               (  \       /   ;        
               |   |     /   /         
               |  /'._  /  ,'          
             .'  /    `'-./            
          _.'   /                     
         /  .-''     BADGER BOT 🦡     
        (  (                      
         '-'\__                  
EOF

echo
echo "💚  Unleashing badger 🤖, chasing given/received Kudos ..."
echo "🌐  Using API: $API_BASE"
echo

# --- Fetch users ---
users=$(curl "${CURL_OPTS[@]}" "$API_USERS" | jq -r '.[].username')

for user in $users; do
  echo "👤 Checking user: $user"

  given=$(curl "${CURL_OPTS[@]}" "$API_BASE/kudos?from=$user" | jq 'length')
  received=$(curl "${CURL_OPTS[@]}" "$API_BASE/kudos?to=$user" | jq 'length')

  echo "   💚 Given: $given | Received: $received"

  badges=$(curl "${CURL_OPTS[@]}" "$API_BASE/badges/user/$user" | jq -r '.[].slug')

  # --- Gave kudos milestones ---
  for count in "${!GAVE_MILESTONES[@]}"; do
    badge="${GAVE_MILESTONES[$count]}"
    if (( given >= count )) && ! grep -q "$badge" <<<"$badges"; then
      echo "   🏅 Granting badge $badge"
      curl "${CURL_OPTS[@]}" -X POST "$API_GRANT" \
        -H "Authorization: Bearer $BADGER_BOT_SECRET" \
        -H "Content-Type: application/json" \
        -d "{\"username\": \"$user\", \"badgeSlug\": \"$badge\"}" \
        | jq -r '.message // "✅ granted"'
    fi
  done

  # --- Received kudos milestones ---
  for count in "${!RECEIVED_MILESTONES[@]}"; do
    badge="${RECEIVED_MILESTONES[$count]}"
    if (( received >= count )) && ! grep -q "$badge" <<<"$badges"; then
      echo "   🏅 Granting badge $badge"
      curl "${CURL_OPTS[@]}" -X POST "$API_GRANT" \
        -H "Authorization: Bearer $BADGER_BOT_SECRET" \
        -H "Content-Type: application/json" \
        -d "{\"username\": \"$user\", \"badgeSlug\": \"$badge\"}" \
        | jq -r '.message // "✅ granted"'
    fi
  done
done

echo
echo "✅ Badger finished successfully!"
